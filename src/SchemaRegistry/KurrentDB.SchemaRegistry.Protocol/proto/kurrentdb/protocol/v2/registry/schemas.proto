syntax = "proto3";

package kurrentdb.protocol.v2;

option csharp_namespace    = "KurrentDB.Protocol.Registry.V2";
option java_package        = "io.kurrentdb.protocol.registry.v2";
option java_multiple_files = true;

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "registry/shared.proto";

message SchemaDetails {
  SchemaDataFormat    data_format   = 1;
  CompatibilityMode   compatibility = 2;
  optional string     description   = 3;
  map<string, string> tags          = 4;
}

message CreateSchemaRequest {
  string         schema_name       = 1;
  SchemaDetails  details           = 2;
  optional bytes schema_definition = 3;
}

message CreateSchemaResponse {
  string schema_version_id = 1;
  int32  version_number    = 2;
}

message UpdateSchemaRequest {
  // The name of the schema to update.
  string schema_name = 1;
  // description and tags only
  SchemaDetails details = 2;
  // Specifies which fields to update. See https://protobuf.dev/reference/protobuf/google.protobuf/#field-mask
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateSchemaResponse {}

message DeleteSchemaRequest {
  string schema_name = 1;
}

message DeleteSchemaResponse {}

message Schema {
  string                    schema_name           = 1;
  SchemaDetails             details               = 2;
  int32                     latest_schema_version = 4;
  google.protobuf.Timestamp created_at            = 5;
  google.protobuf.Timestamp updated_at            = 6;
}

message GetSchemaRequest {
  string schema_name = 1;
}

message GetSchemaResponse {
  Schema schema = 1;
}

// message SchemaListItem {
//   string                    schema_name           = 1;
//   SchemaFormat              data_format           = 2;
//   CompatibilityMode         compatibility         = 3;
//   optional string           description           = 4;
//   repeated string           tags                  = 5;
//   int32                     latest_schema_version = 6;
//   google.protobuf.Timestamp created_at            = 7;
//   google.protobuf.Timestamp updated_at            = 8;  // should update time use the registered_at of the version?
// }

message ListSchemasRequest {
  // The prefix of the schema name. If specified, only schemas with the specified prefix are returned.
  optional string schema_name_prefix = 1;
  // The tags to filter the schemas. If specified, only schemas with the specified tags are returned.
  map<string, string> schema_tags = 2;
}

message ListSchemasResponse {
  repeated Schema schemas = 1;
}

message LookupSchemaNameRequest {
  string schema_version_id = 1;
}

message LookupSchemaNameResponse {
  string schema_name = 1;
}

message RegisterSchemaVersionRequest {
  string schema_name       = 1;
  bytes  schema_definition = 2;
}

message RegisterSchemaVersionResponse {
  string schema_version_id = 1;
  int32  version_number    = 2;
}

message DeleteSchemaVersionsRequest {
  string         schema_name = 1;
  repeated int32 versions    = 2;
}

message DeleteSchemaVersionsResponse {
  repeated SchemaVersionError errors = 1;

  message SchemaVersionError {
    int32        version_number = 1;
    ErrorDetails error          = 2;
  }
}

message SchemaVersion {
  string                    schema_version_id = 1;
  int32                     version_number    = 2;
  bytes                     schema_definition = 3;
  SchemaDataFormat          data_format       = 4;
  google.protobuf.Timestamp registered_at     = 5;
}

message GetSchemaVersionByIdRequest {
  string schema_version_id = 1;
}

message GetSchemaVersionByIdResponse {
  SchemaVersion version = 1;
}

message GetSchemaVersionRequest {
  string         schema_name    = 1;
  optional int32 version_number = 2;  // without this field, the latest version will be returned
}

message GetSchemaVersionResponse {
  SchemaVersion version = 1;
}

message ListSchemaVersionsRequest {
  string schema_name        = 1;
  bool   include_definition = 2;
}

message ListSchemaVersionsResponse {
  repeated SchemaVersion versions = 1;
}

// This message represents the latest registered schema version for a specific schema.
message RegisteredSchema {
  string                    schema_name       = 1;
  string                    schema_version_id = 2;
  int32                     version_number    = 3;
  bytes                     schema_definition = 4;
  SchemaDataFormat          data_format       = 5;
  CompatibilityMode         compatibility     = 6;
  map<string, string>       tags              = 7;
  google.protobuf.Timestamp registered_at     = 8;
}

// This message is used to request a list of registered schemas.
message ListRegisteredSchemasRequest {
  // The unique identifier of the schema version. If specified, only the schema with the specified version ID is returned.
  optional string schema_version_id = 1;
  // The prefix of the schema name. If specified, only schemas with the specified prefix are returned.
  optional string schema_name_prefix = 2;
  // The tags to filter the schemas. If specified, only schemas with the specified tags are returned.
  map<string, string> schema_tags = 3;
  // If true, the schema definition will be included in the response.
  bool include_definition = 4;
}

message ListRegisteredSchemasResponse {
  repeated RegisteredSchema schemas = 1;
}

message BulkRegisterSchemasRequest {
  repeated CreateSchemaRequest requests = 1;

  bool keep_order    = 2;
  bool stop_on_error = 3;
}

message BulkRegisterSchemasResponse {
  google.protobuf.Duration duration = 1;

  repeated CreateSchemaResponse responses = 2;
}
