syntax = "proto3";

package kurrentdb.protocol.v2;

option csharp_namespace    = "KurrentDB.Protocol.Registry.V2";
option java_package        = "io.kurrentdb.protocol.registry.v2";
option java_multiple_files = true;

import "core.proto";

// ErrorDetails provides detailed information about specific error conditions.
message ErrorDetails {
    // When the user does not have sufficient permissions to perform the
    // operation.
    message AccessDenied {
      option (error_info) = {
        code : "ACCESS_DENIED",
        severity : RECOVERABLE,
        message : "The user does not have sufficient permissions to perform the operation."
      };
    }

  // When the schema is not found.
  message SchemaNotFound {
    option (error_info) = {
      code : "STREAM_NOT_FOUND",
      severity : RECOVERABLE,
      message : "The specified schema was not found."
    };

    // The name of the schema that was not found.
    optional string stream = 1;
  }

  // When the schema already exists.
  message SchemaAlreadyExists {
    option (error_info) = {
      code : "STREAM_ALREADY_EXISTS",
      severity : RECOVERABLE,
      message : "The specified schema already exists."
    };

    // The name of the stream that already exists.
    optional string stream = 1;
  }
}

// Represents the format of the schema data.
enum SchemaDataFormat {
  // Default value, should not be used.
  SCHEMA_DATA_FORMAT_UNSPECIFIED = 0;
  SCHEMA_DATA_FORMAT_JSON        = 1;  // application/json
  SCHEMA_DATA_FORMAT_PROTOBUF    = 2;  // application/vnd.google.protobuf
  SCHEMA_DATA_FORMAT_AVRO        = 3;  // application/vnd.apache.avro+json
  SCHEMA_DATA_FORMAT_BYTES       = 4;  // application/octet-stream
}

// Schema compatibility modes define how schema changes are validated against previous versions.
enum CompatibilityMode {
  // Default value, should not be used.
  COMPATIBILITY_MODE_UNSPECIFIED = 0;

  // Backward compatibility allows new schemas to be used with data written by previous schemas.
  // Example: If schema version 1 has a field "name" and schema version 2 adds a new field "age",
  // data written with schema version 1 can still be read using schema version 2.
  // Example of invalid schema: If schema version 1 has a field "name" and schema version 2 removes the "name" field,
  // data written with schema version 1 cannot be read using schema version 2.
  COMPATIBILITY_MODE_BACKWARD = 1;

  // Forward compatibility allows data written by new schemas to be read by previous schemas.
  // Example: If schema version 1 has a field "name" and schema version 2 adds a new field "age",
  // data written with schema version 2 can still be read using schema version 1, ignoring the "age" field.
  // Example of invalid schema: If schema version 1 has a field "name" and schema version 2 changes the "name" field type,
  // data written with schema version 2 cannot be read using schema version 1.
  COMPATIBILITY_MODE_FORWARD = 2;

  // Full compatibility ensures both backward and forward compatibility.
  // This mode guarantees that new schemas can read data written by old schemas,
  // and old schemas can read data written by new schemas.
  COMPATIBILITY_MODE_FULL = 3;

  // Backward All compatibility ensures new schemas can read data written by ALL previous schema versions,
  // not just the immediately preceding one.
  COMPATIBILITY_MODE_BACKWARD_ALL = 4;

  // Forward All compatibility ensures ALL previous schema versions can read data written by new schemas.
  // This provides stronger guarantees than regular forward compatibility.
  COMPATIBILITY_MODE_FORWARD_ALL = 5;

  // Full All compatibility combines backward all and forward all compatibility modes.
  // This ensures complete compatibility across all schema versions, providing the strongest compatibility guarantees.
  COMPATIBILITY_MODE_FULL_ALL = 6;

  // Disables compatibility checks, allowing any kind of schema change.
  // This mode should be used with caution, as it may lead to compatibility issues.
  COMPATIBILITY_MODE_NONE = 7;
}
