syntax = "proto3";

package kurrentdb.protocol.v2;

option csharp_namespace    = "KurrentDB.Protocol.Registry.V2";
option java_package        = "io.kurrentdb.protocol.registry.v2";
option java_multiple_files = true;

import "registry/shared.proto";

// Represents a schema compatibility error.
message SchemaCompatibilityError {
  SchemaCompatibilityErrorKind kind    = 1;  // The type of compatibility error.
  string                       details = 2;  // The error message

  optional string property_path = 3;  // The path to the property where the compatibility error occurred.
  optional string original_type = 4;  // The type of property in the registered schema (e.g. array, bool, number, object)
  optional string new_type      = 5;  // The type of property in the schema being validated (e.g. array, bool, number, object)
}

// Represents the result of schema compatibility, containing a list of compatibility errors.
message SchemaCompatibilityResult {
  // Indicates whether the schema is compatible with the registered schema.
  bool is_compatible = 1;
  // The schema identifier of the schema being validated.
  string schema_version_id = 2;
  // A list of schema compatibility errors.
  repeated SchemaCompatibilityError errors = 3;
}

message CheckSchemaCompatibilityRequest {
  oneof schema_identifier {
    string schema_name       = 1;
    string schema_version_id = 2;
  }

  bytes            definition  = 3;
  SchemaDataFormat data_format = 4;
}

message CheckSchemaCompatibilityResponse {
  //SchemaCompatibilityResult result = 1;
  oneof result {
    Success success = 1;
    Failure failure = 2;
  }

  // Indicates whether the schema is compatible with the registered schema.
  message Success {
    // The schema identifier of the schema being validated.
    string schema_version_id = 2;
  }

  message Failure {
    // A list of schema compatibility errors.
    repeated SchemaCompatibilityError errors = 3;
  }
}

// Enum representing different kinds of compatibility errors.
enum SchemaCompatibilityErrorKind {
  SCHEMA_COMPATIBILITY_ERROR_KIND_UNSPECIFIED                    = 0;  // Default value, do not use.
  SCHEMA_COMPATIBILITY_ERROR_KIND_MISSING_REQUIRED_PROPERTY      = 1;  // Backward compatibility: Required property from old schema missing in new schema
  SCHEMA_COMPATIBILITY_ERROR_KIND_INCOMPATIBLE_TYPE_CHANGE       = 2;  // Backward compatibility: Property type changed incompatibly
  SCHEMA_COMPATIBILITY_ERROR_KIND_OPTIONAL_TO_REQUIRED           = 3;  // Backward compatibility: Property changed from optional to required
  SCHEMA_COMPATIBILITY_ERROR_KIND_NEW_REQUIRED_PROPERTY          = 4;  // Forward compatibility: New required property added
  SCHEMA_COMPATIBILITY_ERROR_KIND_REMOVED_PROPERTY               = 5;  // Forward compatibility: Property removed from schema
  SCHEMA_COMPATIBILITY_ERROR_KIND_ARRAY_TYPE_INCOMPATIBILITY     = 6;  // Issues with array item types
  SCHEMA_COMPATIBILITY_ERROR_KIND_DATA_FORMAT_MISMATCH           = 7;  // Data format mismatch between schemas
}

// Represents the information necessary to check schema compatibility or validate a schema.
message SchemaValidationInfo {
  string            schema_version_id = 1;
  bytes             schema_definition = 2;
  SchemaDataFormat  data_format       = 3;
  CompatibilityMode compatibility     = 4;
}
